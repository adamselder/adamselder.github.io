warnings()
# Chunk 1: setup
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
sub_info <- list("Land" = "Land",
"Existing Structure" = "Existing Structure",
"Construction" = "Construction",
"Pre Construction Services" = "Pre Construction Services",
"Demo" = "Demo",
"General Contractor Costs: Roll below values up" = c( "New Building", "Rehab", "Furnishings", "Appliances", "Site Work/Infrastructure", "Flooring", "Land Improvements", "Off site infrastructure", "Environmental Abatement (Building)", "Environmental Abatement (Land)", "Contractor Profit", "Contractor Overhead"),
"Environmental Abatement by Owner: " = c("Building", "Land2"),
"Construction Contingencies" = c("Construction Contingency", "Escalation", "Contractor Contingency"),
"Sales Tax" = c("Sales Tax on GC Contract Work", "Sales Tax on Contingency + Owner Direct Work"),
"Bond Premium" = "Bond Premium",
"Owner Construction Costs:" = c( "Common Area Furnishings", "Apartment Furnishings ", "Low Voltage Contractor", "Other Owner Direct Contracts"),
"Appraisal" = "Appraisal",
"Market Study" = "Market Study",
"Architect:" = c("Site Analysis and Concept", "Base Contract", "Capital Needs Assessment", "Reimbursables"),
"Engineering" = "Engineering",
"Environmental Assessment" = "Environmental Assessment",
"Geotechnical Study" = "Geotechnical Study",
"Boundary & Topographic Survey" = "Boundary & Topographic Survey",
"Legal - Real Estate" = "Legal - Real Estate",
"Developer Fee:" = "Developer Fee:",
"Other Construction Testing Consultants:" = c("Surveyor Monitoring", "Air Barrier & Window Testing", "Geotech Monitoring", "Structural Testing (Special Inspections)", "HVAC & Plumbing Commissioning"),
"Other Soft Costs: " = c("Construction Easements", "SCL Transformer Trucking"),
"Construction Loan Fees:" = c("Origination Fee", "Inspections", "Appraisal2", "Bank Legal", "PSH DEV org Legal"),
"Construction Loan Interest" = "Construction Loan Interest",
"Perm Loan Fees" = "Perm Loan Fees",
"Perm Loan Expenses " = "Perm Loan Expenses ",
"Perm Loan Legal" = "Perm Loan Legal",
"LIHTC Fees(WSHFC)" = "LIHTC Fees(WSHFC)",
"LIHTC Legal:" = c("Investor Legal", "PSH Dev. Org Legal"),
"State HTF Fees" = "State HTF Fees",
"Operating Reserves" = "Operating Reserves",
"Investor Service Fee Reserve" = "Investor Service Fee Reserve",
"Replacement Reserves" = "Replacement Reserves",
"Insurance:" = c("Builders Risk", "Liability for PSH Dev org", "Other"),
"Relocation" = "Relocation",
"Permits Fees & Hookups" = c("SDCI (Building & Land Use)", "Seattle City Light ", "SDOT ", "SPU", "KC Wastewater Treatment", "Phone/Cable/Internet"),
"Development Period Utilities" = "Development Period Utilities",
"LIHTC Nonprofit Donation " = "LIHTC Nonprofit Donation ",
"Accounting/Audit" = "Accounting/Audit",
"Marketing/Leasing Expenses" = "Marketing/Leasing Expenses",
"Carrying Costs at Rent Up" = "Carrying Costs at Rent Up")
orig_dat <- read.csv("cost_break.csv", stringsAsFactors = FALSE)
double_land <- which(orig_dat$Project.Profile == "Land")
double_apprais <- which(orig_dat$Project.Profile == "Appraisal")
orig_dat$Project.Profile[double_land[2]] <- "Land2"
orig_dat$Project.Profile[double_apprais[2]] <- "Appraisal2"
make_row <- function(data_f, list, list_idx, proj_num){
outer_name <- names(list)[list_idx]
sub_names <- list[[list_idx]]
col_name <- colnames(data_f)[grep(proj_num, colnames(data_f))][2]
sub_data <- data_f %>% subset(Project.Profile %in% sub_names,
select = col_name)
for(sub_idx in 1:nrow(sub_data)){
row_val <- c(outer_name, list[[list_idx]][[sub_idx]],
proj_num, sub_data[sub_idx, 1])
if(exists("cat_mat")){
cat_mat <- rbind(cat_mat, row_val)
}else{
cat_mat <- matrix(row_val, nrow = 1)
colnames(cat_mat) <- c("Category", "Subcategory", "Project", "Expense")
}
}
rownames(cat_mat) <- NULL
return(cat_mat)
}
make_row_c <- function(data_f, list, list_idx, proj_num){
outer_name <- names(list)[list_idx]
sub_names <- list[[list_idx]]
col_name <- colnames(data_f)[grep(proj_num, colnames(data_f))][2]
sub_data <- data_f %>% subset(Project.Profile %in% outer_name,
select = col_name)
row_val <- c(outer_name, proj_num, sub_data[1, 1])
if(exists("cat_mat")){
cat_mat <- rbind(cat_mat, row_val)
}else{
cat_mat <- matrix(row_val, nrow = 1)
colnames(cat_mat) <- c("Category", "Subcategory", "Project", "Expense")
}
rownames(cat_mat) <- NULL
return(cat_mat)
}
# Chunk 2: cars
for(l_idx in 1:length(sub_info)){
for(p_idx in 1:5){
if(exists("fin_mat")){
fin_mat <- rbind(fin_mat, make_row(orig_dat, sub_info, l_idx, p_idx))
}else{
fin_mat <- make_row(orig_dat, sub_info, l_idx, p_idx)
}
}
}
for(l_idx in 1:length(sub_info)){
for(p_idx in 1:5){
if(exists("cm_mat")){
cm_mat <- rbind(cm_mat, make_row(orig_dat, sub_info, l_idx, p_idx))
}else{
cm_mat <- make_row(orig_dat, sub_info, l_idx, p_idx)
}
}
}
fin_df <- as.data.frame(fin_mat, stringsAsFactors = FALSE)
cat_df <- as.data.frame(cm_mat, stringsAsFactors = FALSE)
fin_df$Project <- c("Capital stack", "Fees, Permiting, and Tax",
"Non-podium construction", "Free Land",
"Compounded Savings")[as.numeric(fin_df$Project)]
cat_df$Project <- c("Capital stack", "Fees, Permiting, and Tax",
"Non-podium construction", "Free Land",
"Compounded Savings")[as.numeric(cat_df$Project)]
fin_df[, 4] <- as.numeric(fin_df[, 4])
cat_df[, 4] <- as.numeric(cat_df[, 4])
library(plotly)
plot_ly(fin_df, x = ~Project, y = ~Expense, type = 'bar',
name = ~Subcategory, color = ~Subcategory) %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
# Chunk 3: pressure
plot_ly(fin_df, x = ~Project, y = ~Expense, type = 'bar',
name = ~Category, color = ~Category) %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
sub_df <- fin_df %>% group_by(Category, Project) %>%
summarize(Cost = sum(Expense))
sub_df
ost
sub_df$rank <- sub_df %>% group_by(Project) %>% summarise("rank" = order(Cost))
sub_df$rank <- sub_df %>% group_by(Project) %>% summarise(rank = order(Cost))
sub_df$rank <- sub_df %>% group_by(Project) %>% summarize(rank = order(Cost))
sub_df %>% group_by(Project) %>% summarize(rank = order(Cost))
sub_df$rank <- sub_df %>% group_by(Project) %>% summarize(avg_cost = mean(Cost))
sub_df %>% group_by(Project) %>% summarize(avg_cost = mean(Cost))
sub_df$rank <- sub_df %>% group_by(Category) %>% summarize(avg_cost = mean(Cost))
sub_df %>% group_by(Category) %>% summarize(avg_cost = mean(Cost))
sub_df <- left_join(sub_df,
sub_df %>% group_by(Category) %>%
summarize(avg_cost = mean(Cost)))
sub_df
sub_df[order(sub_df$avg_cost),]
sub_df[order(sub_df$avg_cost, decreasing = TRUE),]
ggplot2::ggplot(data = sub_df, aes(x = Category, y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Percent of Population (Within Race)") + theme_minimal() +
theme(axis.text.x=element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = my_cols)
sub_df <- sub_df[order(sub_df$avg_cost, decreasing = TRUE),]
ggplot2::ggplot(data = sub_df, aes(x = Category, y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Percent of Population (Within Race)") + theme_minimal() +
theme(axis.text.x=element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = my_cols)
my_cols <- wesanderson::wes_palettes$Zissou1
ggplot2::ggplot(data = sub_df, aes(x = Category, y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Percent of Population (Within Race)") + theme_minimal() +
theme(axis.text.x=element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = my_cols)
sub_df
ggplot2::ggplot(data = sub_df, aes(x = reorder(Category, -avg_cost), y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Percent of Population (Within Race)") + theme_minimal() +
theme(axis.text.x=element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = my_cols)
largest_avg_cost <- sort(sub_df$avg_cost, decreasing = TRUE)[1:10]
largest_avg_cost
ggplot2::ggplot(data = largest_cost, aes(x = reorder(Category, -avg_cost), y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Percent of Population (Within Race)") + theme_minimal() +
theme(axis.text.x=element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = my_cols)
largest_cost <- sub_df[sub_df$avg_cost %in% largest_avg_cost, ]
ggplot2::ggplot(data = largest_cost, aes(x = reorder(Category, -avg_cost), y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Percent of Population (Within Race)") + theme_minimal() +
theme(axis.text.x=element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = my_cols)
largest_avg_cost <- unique(sort(sub_df$avg_cost, decreasing = TRUE))[1:10]
largest_cost <- sub_df[sub_df$avg_cost %in% largest_avg_cost, ]
ggplot2::ggplot(data = largest_cost, aes(x = reorder(Category, -avg_cost), y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Percent of Population (Within Race)") + theme_minimal() +
theme(axis.text.x=element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = my_cols)
ggplot2::ggplot(data = largest_cost, aes(x = reorder(Category, -avg_cost), y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Cost in Dollars") + xlab("Cost Category")  +
theme(axis.text.x=element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = my_cols)
ggplot2::ggplot(data = largest_cost, aes(x = reorder(Category, -avg_cost), y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Cost in Dollars") + xlab("Cost Category")  +
theme(axis.text.x=element_text(angle = 85, hjust = 1)) +
scale_fill_manual(values = my_cols)
ggplot2::ggplot(data = largest_cost, aes(x = reorder(Category, -avg_cost), y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Cost in Dollars") + xlab("Cost Category")  +
theme(axis.text.x=element_text(angle = 25, hjust = 1)) +
scale_fill_manual(values = my_cols)
ggplot2::ggplot(data = largest_cost, aes(x = reorder(Category, -avg_cost), y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Cost in Dollars") + xlab("Cost Category") + theme_minimal() +
theme(axis.text.x=element_text(angle = 25, hjust = 1))
ggplot2::ggplot(data = largest_cost, aes(x = reorder(Category, -avg_cost), y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Cost in Dollars") + xlab("Cost Category") + theme_minimal() +
theme(axis.text.x=element_text(angle = 25, hjust = 1)) +
scale_fill_manual(values = my_cols)
largest_avg_cost <- unique(sort(sub_df$avg_cost, decreasing = TRUE))[11:20]
next_ten_avg <- unique(sort(sub_df$avg_cost, decreasing = TRUE))[11:20]
next_ten <- sub_df[sub_df$avg_cost %in% next_ten_avg, ]
ggplot2::ggplot(data = next_ten, aes(x = reorder(Category, -avg_cost), y = Cost,
fill = Project)) +
geom_bar(stat="identity", position=position_dodge()) +
ylab("Cost in Dollars") + xlab("Cost Category") + theme_minimal() +
theme(axis.text.x=element_text(angle = 25, hjust = 1)) +
scale_fill_manual(values = my_cols)
plot_ly(fin_df, x = ~Project, y = ~Expense, type = 'bar',
name = ~Category, color = ~Category) %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
